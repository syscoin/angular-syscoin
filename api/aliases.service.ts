/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';
import { CustomQueryEncoderHelper }                          from '../encoder';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Alias } from '../model/alias';
import { AliasAddScriptRequest } from '../model/aliasAddScriptRequest';
import { AliasClearWhiteListRequest } from '../model/aliasClearWhiteListRequest';
import { AliasNewRequest } from '../model/aliasNewRequest';
import { AliasPayRequest } from '../model/aliasPayRequest';
import { AliasUpdateRequest } from '../model/aliasUpdateRequest';
import { AliasUpdateWhitelistRequest } from '../model/aliasUpdateWhitelistRequest';
import { ErrorResponse } from '../model/errorResponse';
import { SyscoinTransactionFundRequest } from '../model/syscoinTransactionFundRequest';
import { WhitelistEntry } from '../model/whitelistEntry';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AliasesService {

    protected basePath = 'http://localhost:8001';
    public defaultHeaders = new Headers();
    public configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * add a redeem script to alias
     * @param request 
     */
    public aliasaddscript(request: AliasAddScriptRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<string> {
        return this.aliasaddscriptWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns the total amount received by the given alias in transactions with at least minconf confirmations.
     * @param alias The syscoin alias for transactions
     */
    public aliasbalance(alias: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<number> {
        return this.aliasbalanceWithHttpInfo(alias, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Clear your whitelist(controls who can resell).
     * @param request 
     */
    public aliasclearwhitelist(request: AliasClearWhiteListRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<any> {
        return this.aliasclearwhitelistWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Show values of an alias.
     * @param aliasname 
     */
    public aliasinfo(aliasname: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Alias> {
        return this.aliasinfoWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Creates a new Syscoin Alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasnew(request: AliasNewRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Array<string>> {
        return this.aliasnewWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Send multiple times from an alias. Amounts are double-precision floating point numbers.
     * @param request 
     */
    public aliaspay(request: AliasPayRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Array<string>> {
        return this.aliaspayWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Update and possibly transfer an alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasupdate(request: AliasUpdateRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Array<string>> {
        return this.aliasupdateWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Update to the whitelist(controls who can resell). Array of whitelist entries in parameter 1.
     * @param request 
     */
    public aliasupdatewhitelist(request: AliasUpdateWhitelistRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Array<string>> {
        return this.aliasupdatewhitelistWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * List all affiliates for this alias.
     * @param aliasname 
     */
    public aliaswhitelist(aliasname: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Array<WhitelistEntry>> {
        return this.aliaswhitelistWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * fund an alias creation (possibly other operations in the future)
     * @param request 
     */
    public syscointxfund(request: SyscoinTransactionFundRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<string> {
        return this.syscointxfundWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * add a redeem script to alias
     * @param request 
     
     */
    public aliasaddscriptWithHttpInfo(request: AliasAddScriptRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasaddscript.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasaddscript`, requestOptions);
    }

    /**
     * 
     * Returns the total amount received by the given alias in transactions with at least minconf confirmations.
     * @param alias The syscoin alias for transactions
     
     */
    public aliasbalanceWithHttpInfo(alias: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling aliasbalance.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (alias !== undefined) {
            queryParameters.set('alias', <any>alias);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasbalance`, requestOptions);
    }

    /**
     * 
     * Clear your whitelist(controls who can resell).
     * @param request 
     
     */
    public aliasclearwhitelistWithHttpInfo(request: AliasClearWhiteListRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasclearwhitelist.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasclearwhitelist`, requestOptions);
    }

    /**
     * 
     * Show values of an alias.
     * @param aliasname 
     
     */
    public aliasinfoWithHttpInfo(aliasname: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (aliasname === null || aliasname === undefined) {
            throw new Error('Required parameter aliasname was null or undefined when calling aliasinfo.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (aliasname !== undefined) {
            queryParameters.set('aliasname', <any>aliasname);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasinfo`, requestOptions);
    }

    /**
     * 
     * Creates a new Syscoin Alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     
     */
    public aliasnewWithHttpInfo(request: AliasNewRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasnew.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasnew`, requestOptions);
    }

    /**
     * 
     * Send multiple times from an alias. Amounts are double-precision floating point numbers.
     * @param request 
     
     */
    public aliaspayWithHttpInfo(request: AliasPayRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliaspay.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliaspay`, requestOptions);
    }

    /**
     * 
     * Update and possibly transfer an alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     
     */
    public aliasupdateWithHttpInfo(request: AliasUpdateRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasupdate.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasupdate`, requestOptions);
    }

    /**
     * 
     * Update to the whitelist(controls who can resell). Array of whitelist entries in parameter 1.
     * @param request 
     
     */
    public aliasupdatewhitelistWithHttpInfo(request: AliasUpdateWhitelistRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasupdatewhitelist.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliasupdatewhitelist`, requestOptions);
    }

    /**
     * 
     * List all affiliates for this alias.
     * @param aliasname 
     
     */
    public aliaswhitelistWithHttpInfo(aliasname: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (aliasname === null || aliasname === undefined) {
            throw new Error('Required parameter aliasname was null or undefined when calling aliaswhitelist.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (aliasname !== undefined) {
            queryParameters.set('aliasname', <any>aliasname);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/aliaswhitelist`, requestOptions);
    }

    /**
     * 
     * fund an alias creation (possibly other operations in the future)
     * @param request 
     
     */
    public syscointxfundWithHttpInfo(request: SyscoinTransactionFundRequest, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling syscointxfund.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/syscointxfund`, requestOptions);
    }

}
